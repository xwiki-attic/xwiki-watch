<?xml version="1.0" encoding="ISO-8859-1"?>

<xwikidoc>
<web>WatchCode</web>
<name>PressReviewRss</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.LudovicDubost</creator>
<author>XWiki.LudovicDubost</author>
<customClass></customClass>
<contentAuthor>XWiki.LudovicDubost</contentAuthor>
<creationDate>1182269058000</creationDate>
<date>1182283910000</date>
<contentUpdateDate>1182283910000</contentUpdateDate>
<version>1.3</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<content>{pre}
&lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://purl.org/rss/1.0/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wiki="http://purl.org/rss/1.0/modules/wiki/" xmlns:html="http://www.w3.org/1999/xhtml"&gt;
&lt;%
  baseurl = xwiki.getURL(request.space + ".WebHome") 
  space = request.space
  language = doc.defaultLanguage
  copyright = xwiki.getXMLEncoded(xwiki.webCopyright.replaceAll('&lt;', '&lt;html:').replaceAll('&lt;html:/', '&lt;/html:'))
  publisher = xwiki.getXMLEncoded(xwiki.getUserName(doc.author, false))
  creator = xwiki.getXMLEncoded(xwiki.getUserName(doc.author, false))
%&gt;
&lt;channel rdf:about="${baseurl}"&gt;
&lt;title&gt;
&lt;% print msg.get("watch.pressreviewforspace") %&gt; ${space}
&lt;/title&gt;
&lt;link&gt;${baseurl}&lt;/link&gt;
&lt;description&gt;
&lt;% print msg.get("watch.pressreviewforspace") %&gt; ${space}
&lt;/description&gt;
&lt;dc:language&gt;${language}&lt;/dc:language&gt;
&lt;dc:rights&gt;${copyright}&lt;/dc:rights&gt;
&lt;dc:publisher&gt;${publisher}&lt;/dc:publisher&gt;
&lt;dc:creator&gt;${creator}&lt;/dc:creator&gt;
&lt;%
if (request.keyword==null) {
 skeyword = ""
} else {
 skeyword = request.keyword
}
String skeyword = skeyword.replaceAll("'", "''");
String sql = ", BaseObject as obj, XWiki.FeedEntryClass as feedentry ";
String wheresql = "where doc.fullName=obj.name and obj.className='XWiki.FeedEntryClass' and obj.id=feedentry.id ";
if (!(skeyword.trim()=="")) {
   wheresql  += " and (feedentry.title like '%" + skeyword + "%' or feedentry.content like '%" + skeyword + "%' or feedentry.fullContent like '%" + skeyword + "%') ";
}

if (request.flagged=="1") {
             wheresql += " and feedentry.flag=1";
} else if ((request.flagged=="-1")&amp;&amp;(request.trashed=="-1")) {
            wheresql += " and (feedentry.flag=0 or feedentry.flag is null)";
} else if (request.trashed=="1") {
            wheresql += " and feedentry.flag=-1";
} else if (request.trashed=="-1") {
            wheresql += " and (feedentry.flag&gt;-1 or feedentry.flag is null)";
} else if (request.flagged=="-1") {
            wheresql += " and (feedentry.flag&lt;1 or feedentry.flag is null)";
}

if ((request.feed!=null)&amp;&amp;(!request.feed.trim().equals(""))) {
            wheresql += " and feedentry.feedurl='" + request.feed.replaceAll("'","''") + "'";
} else if ((request.group!=null)&amp;&amp;(!request.group.trim().equals(""))) {
            wheresql += " and feedentry.feedurl in (select feed.url from XWiki.AggregatorURLClass as feed where '" + request.group.replaceAll("'","''") + "' in elements(feed.group))"; 
}

if (request.tags!=null) {
 for(tag in request.getParameterValues("tags")) {
  wheresql += " and '" + tag.replaceAll("'","''") + "' in elements(feedentry.tags) ";
 }
}


if (request.read=="1") {
  wheresql += " and feedentry.read=1";
}
if (request.read=="-1") {
   wheresql += " and (feedentry.read is null or feedentry.read=0)";
}

if (request.date!=null) {
  wheresql += " and feedentry.date &gt;= '" + request.date + "' ";
}

sql += wheresql + " and doc.web='" + request.space + "' order by feedentry.date desc, doc.creationDate desc";
list = xwiki.searchDocuments(sql, 50, 0);
%&gt;
&lt;items&gt;
&lt;rdf:Seq&gt;
&lt;%
for(item in list) {
  itemdoc = xwiki.getDocument(item)
  itemdoc.use("XWiki.FeedEntryClass")
  url = xwiki.getXMLEncoded(itemdoc.display("url"))
%&gt;&lt;rdf:li rdf:resource="${url}" /&gt;&lt;%
 }
%&gt;
&lt;/rdf:Seq&gt;
&lt;/items&gt;
&lt;/channel&gt;
&lt;%
for(item in list) {
  itemdoc = xwiki.getDocument(item)
  itemdoc.use("XWiki.FeedEntryClass")
  url = xwiki.getXMLEncoded(itemdoc.display("url"))
  title = xwiki.getXMLEncoded(itemdoc.display("title"))
  content = xwiki.getXMLEncoded(itemdoc.display("content"))
  tags = xwiki.getXMLEncoded(itemdoc.display("tags"))
  tz = xwiki.formatDate(itemdoc.date, "Z")
  tz = tz.substring(0, 3) + ":" + tz.substring(3)
  author = xwiki.getXMLEncoded(itemdoc.display("author"))
  date= itemdoc.getValue("date")
  sdate1 = xwiki.formatDate(date, "yyyy-MM-dd")
  sdate2 = xwiki.formatDate(date, "hh:mm:ss")
  sdate = sdate1 + "T" + sdate2 + tz
%&gt;
&lt;item rdf:about="${url}"&gt;
&lt;title&gt;${title}&lt;/title&gt;
&lt;link&gt;${url}&lt;/link&gt;
&lt;description&gt;${content}&lt;/description&gt;
&lt;dc:subject&gt;${tags}&lt;/dc:subject&gt;
&lt;dc:date&gt;${sdate}&lt;/dc:date&gt;
&lt;dc:creator&gt;${author}&lt;/dc:creator&gt;
&lt;/item&gt;
&lt;%
}
%&gt;
&lt;/rdf:RDF&gt;
{/pre}
</content></xwikidoc>