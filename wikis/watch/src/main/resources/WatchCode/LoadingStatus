<?xml version="1.0" encoding="ISO-8859-1"?>

<xwikidoc>
<web>WatchCode</web>
<name>LoadingStatus</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.Admin</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1181132502000</creationDate>
<date>1182156536000</date>
<contentUpdateDate>1182156536000</contentUpdateDate>
<version>1.3</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<content>&lt;h2&gt;$msg.get("watch.loadingstatus.title")&lt;/h2&gt;

&lt;%

def checkAndPerformUpdate() {
  def isUpdateRequired = true;
  def expectedVersion = "1.0-rc-2";
  def watchVersionDoc = xwiki.getDocument("WatchCode.WatchVersionClass");
  def watchVersionObject = watchVersionDoc.getObject("WatchCode.WatchVersionClass");
  if (watchVersionObject != null) {
    //check the version number
    def versionNumber = watchVersionObject.getProperty("number").getValue();
    if (versionNumber.trim().equals(expectedVersion)) {
      isUpdateRequired = false;
    }
  }

  if (isUpdateRequired) {
    def titleFeedsSql = ", BaseObject as obj where doc.fullName = obj.name and obj.className = 'XWiki.AggregatorURLClass' and obj.id not in (select obj2.id from BaseObject as obj2, StringProperty as prop where obj2.id = prop.id.id and obj2.className = 'XWiki.AggregatorURLClass' and prop.id.name = 'title' and prop.value is not null and trim (both from prop.value) != '')";
    def titleFeeds = xwiki.searchDocuments(titleFeedsSql);
    for (titleFeed in titleFeeds) {
      def titleFeedDoc = xwiki.getDocument(titleFeed);
      def titleFeedObj = titleFeedDoc.getObject('XWiki.AggregatorURLClass');
      titleFeedObj.set("title", titleFeedObj.getProperty("name").getValue());
      titleFeedDoc.saveWithProgrammingRights();
    }
  }
  if(watchVersionObject == null) {
    watchVersionObject = watchVersionDoc.newObject("WatchCode.WatchVersionClass");
  }
  watchVersionObject.set("number", expectedVersion);
  watchVersionDoc.saveWithProgrammingRights();
}

//update if needed
checkAndPerformUpdate();

// make sure loading is started
if (request.space) {
 if (request.force=="1") {
  xwiki.feed.getUpdateThread(request.space).update();
 } else {
  xwiki.feed.startUpdateFeedsInSpace(request.space, 19000);
def updateThread = xwiki.feed.getUpdateThread(request.space);

println "* ${msg.get("watch.updateactive")}: ${msg.get("watch.loadingstatus.true")}";
if (updateThread.isUpdateInProgress()) {
  println "* ${msg.get("watch.updateinprogress")}: ${msg.get("watch.loadingstatus.true")}";
} else {
  println "* ${msg.get("watch.updateinprogress")}: ${msg.get("watch.loadingstatus.false")}";
} 


sql = "select count(*) from XWikiDocument as doc, BaseObject as obj where doc.web='${request.space}' and doc.fullName=obj.name and obj.className='XWiki.FeedEntryClass'"
nb = xwiki.search(sql)[0]
println "* ${msg.get("watch.nbtotalarticles")}: ${nb}"

sql = "select count(distinct obj.id) from XWikiDocument as doc, BaseObject as obj where doc.web='${request.space}' and doc.fullName=obj.name and obj.className='XWiki.AggregatorURLClass'"
nb = xwiki.search(sql)[0]
println "* ${msg.get("watch.nbdefinedfeeds")}: ${nb}"

sql = "select count(distinct feedentry.feedname) from XWikiDocument as doc, BaseObject as obj, XWiki.FeedEntryClass as feedentry where  doc.web='${request.space}' and doc.fullName=obj.name and obj.className='XWiki.FeedEntryClass' and obj.id=feedentry.id"
nb = xwiki.search(sql)[0]
println "* ${msg.get("watch.nbdefinedfeedswithdata")}: ${nb}"

println "* ${msg.get("watch.nbloadedfeeds")}: " + updateThread.nbLoadedFeeds
println "* ${msg.get("watch.nbloadedfeedserrors")}: " + updateThread.nbLoadedFeedsErrors
println "* ${msg.get("watch.nbarticlesloaded")}: " + updateThread.nbLoadedArticles
println "* ${msg.get("watch.startdata")}: " + updateThread.startDate
println "* ${msg.get("watch.enddata")}: " + updateThread.endDate
if (updateThread.exception!=null)
 println "* ${msg.get("watch.exception")}: " + updateThread.exception

println "&lt;h2&gt;${msg.get("watch.feeds")}&lt;/h2&gt;"

sql = "select feedentry.feedname, count(*) from XWikiDocument as doc, BaseObject as obj, XWiki.FeedEntryClass as feedentry  where doc.web='${request.space}' and doc.fullName=obj.name and obj.className='XWiki.FeedEntryClass' and obj.id=feedentry.id  group by feedentry.feedname"

println "{table}"
println "${msg.get("watch.feedname")} | ${msg.get("watch.nbarticles")}"
for(data in xwiki.search(sql)) {
 def feedname = data[0]
 def feednb = data[1]
 println "${feedname} | ${feednb}"
}

println "{table}"
}
}
%&gt;</content>
</xwikidoc>
